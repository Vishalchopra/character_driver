head	1.8;
access;
symbols;
locks
	emblogic:1.8; strict;
comment	@ * @;


1.8
date	2015.05.14.12.01.00;	author emblogic;	state Exp;
branches;
next	1.7;

1.7
date	2015.05.08.06.04.56;	author emblogic;	state Exp;
branches;
next	1.6;

1.6
date	2015.05.06.14.51.29;	author emblogic;	state Exp;
branches;
next	1.5;

1.5
date	2015.05.06.14.12.17;	author emblogic;	state Exp;
branches;
next	1.4;

1.4
date	2015.04.27.12.46.52;	author emblogic;	state Exp;
branches;
next	1.3;

1.3
date	2015.04.27.12.44.54;	author emblogic;	state Exp;
branches;
next	1.2;

1.2
date	2015.04.27.11.33.08;	author emblogic;	state Exp;
branches;
next	1.1;

1.1
date	2015.04.27.10.25.08;	author emblogic;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Accept module para.
@
text
@#include "header.h"
#include "declaration.h"
#include "filopertion.h"

struct DEV *sdev;
struct cdev c_dev;
dev_t dev;
int ret_reg;
unsigned int majorno, minorno, nod, quantum_size, qset_size, device_size, data_size;

module_param(nod, int, S_IRUGO);
module_param(quantum_size, int, S_IRUGO);
module_param(qset_size, int, S_IRUGO);

void init_dev_parameter(void)
{
	majorno = MAJOR(dev);
	minorno = MINOR(dev);
	majorno = MAJORNO;
	minorno = MINORNO;
	//quantum_size = QUANTUM_SIZE;
	//qset_size = QSET_SIZE;
	device_size = DEVICE_SIZE;
	data_size = DATA_SIZE;
	
}
static int __init start_ker_pro(void)
{
	int dvar;
	printk(KERN_INFO "I'M in......\n");
	init_dev_parameter();
	if(majorno)
	{
		register_chrdev_region(majorno, nod, DNAME );	
	}
	else
	{
		ret_reg = alloc_chrdev_region(&dev, minorno, nod, DNAME);
		if(ret_reg == -1)
		{
			printk(KERN_ERR "wrong wrong");
			goto OUT;
		}
	}
	#ifdef DEBUG
	printk(KERN_INFO "major number %d\n", majorno);
	#endif 
	
	#ifdef DEBUG
	printk(KERN_INFO "node = %d\n", nod);
	#endif 
	
	sdev = kmalloc(sizeof(struct DEV) * nod, GFP_KERNEL);
	printk(KERN_INFO "The size is \n" );
	memset(sdev, '\0', sizeof(struct DEV) * nod);


	for(dvar = 0; dvar < nod; dvar++)
	{
		cdev_init(&sdev[dvar].c_dev, &fops);
		sdev[dvar].c_dev.owner = THIS_MODULE;
		sdev[dvar].c_dev.ops = &fops;
		sdev[dvar].quantum_size = quantum_size;
		sdev[dvar].qset_size = qset_size;
		sdev[dvar].device_size = device_size;
		sdev[dvar].data_size = data_size;

		if( cdev_add(&sdev[dvar].c_dev, dev, nod) != 0)
		{
			#ifdef DEBUG
			printk(KERN_INFO "There some error in cdev_add\n");
			#endif 
		}
	
	}
	return 0;
OUT:
	#ifdef DEBUG
	printk(KERN_INFO "There some error please fix this\n");
	#endif 
	return -1;
}

module_init(start_ker_pro);
@


1.7
log
@*** empty log message ***
@
text
@d12 2
d21 2
a22 2
	quantum_size = QUANTUM_SIZE;
	qset_size = QSET_SIZE;
@


1.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
//#include "filopertion.h"
a4 1
const struct file_operations ops;
d15 2
a42 2
	majorno = MAJOR(dev);
	minorno = MINOR(dev);
d58 1
a58 1
		cdev_init(&sdev[dvar].c_dev, &ops);
d60 1
a60 1
		sdev[dvar].c_dev.ops = &ops;
@


1.5
log
@*** empty log message ***
@
text
@d3 1
d59 1
a59 1
		cdev_init(&sdev[dvar].c_dev, fops);
d61 1
a61 1
		sdev[dvar].c_dev.ops = fops;
@


1.4
log
@*** empty log message ***
@
text
@d58 1
a58 1
		cdev_init(&sdev[dvar].c_dev, &ops);
d60 1
a60 1
		sdev[dvar].c_dev.ops = &ops;
@


1.3
log
@*** empty log message ***
@
text
@d9 1
a9 1
unsigned int majorno, minorno, nod, quantum_size, qset_size, device_sise, data_size;
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
const struct file_operations ofs;
d9 1
a9 1
unsigned int majorno, minorno, nod;
d12 11
d27 6
a32 6
	
	majorno = MAJORNO;
	minorno = MINORNO;
	
	ret_reg = alloc_chrdev_region(&dev, minorno, nod, DNAME);
	if(ret_reg == -1)
d34 7
a40 3
		printk(KERN_ERR "wrong wrong");
		goto OUT;
	}	
d58 1
a58 1
		cdev_init(&sdev[dvar].c_dev, &ofs);
d60 6
a65 1
		sdev[dvar].c_dev.ops = &ofs;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
struct file_operations ofs;
d14 1
a39 1
	cdev_init(&sdev->c_dev, &ofs);
d41 1
a41 1
	for(dvar = 0; dvar < node; dvar++)
d43 10
a52 8
		sdev[dvar].cdev.owner = THIS_MODULE;
		sdev[dvar].cdev.file_operations = &ofs;
	}
	if( cdev_add(&sdev->c_dev, dev, nod) == 0)
	{
		#ifdef DEBUG
		printk(KERN_INFO "There some error in cdev_add\n");
		#endif 
@
